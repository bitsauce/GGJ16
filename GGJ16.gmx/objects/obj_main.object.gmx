<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_fullscreen(true);
application_surface_enable(false);

display_width = display_get_width(); display_height = display_get_height();
//display_width = room_width; display_height = room_height;

var spawn_point = instance_find(obj_initial_spawn_point, 0);
player_0 = instance_create(spawn_point.x - 80 * 2, spawn_point.y, obj_player);
player_1 = instance_create(spawn_point.x + 80 * 2, spawn_point.y, obj_player);

with (player_0) {
    key_move_left = ord("A");
    key_move_right = ord("D");
    key_aim_up = ord("W");
    key_aim_down = ord("S");
    key_move_down = key_aim_down;
    key_attack = ord("E");
    key_jump = vk_space;
    key_switch_weapon = ord("Q");
    color = make_color_rgb(200, 200, 50);//make_colour_rgb(0, 200, 200);
    other_player = obj_main.player_1;
}

with (player_1) {
    key_move_left = vk_left;
    key_move_right = vk_right;
    key_aim_up = vk_up;
    key_aim_down = vk_down;
    key_move_down = key_aim_down;
    key_attack = vk_rshift;
    key_jump = vk_rcontrol;
    key_switch_weapon = vk_enter;
    color = make_color_rgb(180, 70, 70);//make_colour_rgb(200, 0, 200);
    scale_x = -1;
    other_player = obj_main.player_0;
}

instance_create(0, 0, obj_ui);
instance_create(0, 0, obj_camera);
instance_create(0, 0, obj_day_night);
instance_create(0, 0, obj_water);

with (all) visible = false;
visible = true;

sf_water_reflection = -1;
sf_water = -1;

in_menu = 0;
in_menu_timer_0 = 0;
in_menu_timer_1 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(sf_water_reflection)) {
    sf_water_reflection = surface_create(display_width, display_height);
    view_surface_id[0] = sf_water_reflection;
}
if (!surface_exists(sf_water)) {
    sf_water = surface_create(display_width, display_height);
    view_surface_id[1] = sf_water;
}

if (keyboard_check_pressed(vk_escape)) game_end();

if (in_menu != -1) {
    if (in_menu == 0 || in_menu == 1) {
        instance_deactivate_object(obj_player);
        view_xview = 0;
        view_wview = room_width;
        view_hview = (display_height / display_width) * room_width;
        view_yview = room_height * 0.5 - view_hview * 0.5 + 200;
    }
        
    if (in_menu == 0 &amp;&amp; keyboard_check_pressed(vk_anykey)) {
        in_menu = 1;
        in_menu_timer_0 = 0;
    }
    
    if (in_menu == 1) if (in_menu_timer_0 &lt; 1) in_menu_timer_0 += 0.05; else {in_menu = 2; in_menu_timer_1 = 0; view_xview_start = view_xview; view_yview_start = view_yview; view_wview_start = view_wview; view_hview_start = view_hview;}
    if (in_menu == 2) if (in_menu_timer_1 &lt; 1) {
    
        in_menu_timer_1 += 0.005;
        instance_activate_object(obj_player);
        var x_0 = obj_main.player_0.x, y_0 = obj_main.player_0.y, x_1 = obj_main.player_1.x, y_1 = obj_main.player_1.y;
        
        var target_x = mean(x_0, x_1) - display_width * 0.5, target_y = mean(y_0, y_1) - display_height * 0.5;
        
        var t = smootherstep(clamp(in_menu_timer_1 * 2, 0, 1));
        view_xview = lerp(view_xview_start, target_x, t);
        view_yview = lerp(view_yview_start, target_y, t);
        view_wview = lerp(view_wview_start, obj_main.display_width, t);
        view_hview = lerp(view_hview_start, obj_main.display_height, t);
    } else {in_menu = 3; in_menu_timer_1 = 0;}
    
    if (in_menu == 3) {
        if (in_menu_timer_1 &lt; 1) in_menu_timer_1 += 0.004;
        else {
            in_menu = -1;
            obj_day_night.time = 0.6 * 60;
            
            // Start greeting ritual
            player_0.greeting_active = true;
            player_0.greeting_timer = 3.0;
            player_1.greeting_active = true;
            player_1.greeting_timer = 3.0;
        }
    }
} else {
    var done = false;
    if(player_0.life_points &lt;= 0) {
        obj_ui.winner = 2;
        done = true;
    }
    else if(player_1.life_points &lt;= 0) {
        obj_ui.winner = 3;
        done = true;
    }
    
    if(done) {
        with (player_0) {
            key_move_left = -1;
            key_move_right = -1;
            key_aim_up = -1;
            key_aim_down = -1;
            key_attack = -1;
            key_jump = -1;
            key_switch_weapon = -1;
        }
        
        with (player_1) {
            key_move_left = -1;
            key_move_right = -1;
            key_aim_up = -1;
            key_aim_down = -1;
            key_attack = -1;
            key_jump = -1;
            key_switch_weapon = -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface(sf_water_reflection, 0, 0);

shader_set(sh_water);
    texture_set_repeat(true);
    texture_set_stage(shader_get_sampler_index(sh_water, "texture_sf_water_reflection"), surface_get_texture(sf_water_reflection));
    texture_set_stage(shader_get_sampler_index(sh_water, "s_normalMap"), sprite_get_texture(spr_water_normal, 0));
    shader_set_uniform_f(shader_get_uniform(sh_water, "reflection_y"), ((1792 - view_yview)) / view_hview);
    shader_set_uniform_f(shader_get_uniform(sh_water, "time"), get_timer() * 0.00000001);
    draw_surface(sf_water, 0, 0);
    texture_set_repeat(false);
shader_reset();

with (obj_day_night) event_perform(ev_draw, ev_gui);
with (obj_ui) event_perform(ev_draw, ev_gui);
with (obj_ui_message_big) event_perform(ev_draw, ev_gui);

if (in_menu != -1) {
    draw_sprite(spr_ui_borders, 0, 0, -in_menu_timer_0 * sprite_get_height(spr_ui_borders));
    draw_sprite(spr_ui_borders, 1, 0, display_height * 0.5 + in_menu_timer_0 * sprite_get_height(spr_ui_borders));
    if (in_menu_timer_1 &gt; 0 &amp;&amp; in_menu_timer_1 &lt; 1 &amp;&amp; in_menu == 3) {
        draw_set_halign(fa_center); draw_set_valign(fa_middle);
        var s;
        s[0] = "3"; s[1] = "2"; s[2] = "1"; s[3] = "FIGHT!";
        var i;
        i = floor(in_menu_timer_1 * 4);
        draw_set_font(ft_big);
        draw_set_color(c_dkgray);
        draw_text(obj_main.display_width * 0.5, obj_main.display_height * 0.3, s[i]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_current == 0) {
    var color, alpha = 0, day = make_color_rgb(140, 180, 255), night = make_color_rgb(30, 30, 35);
    if (obj_main.in_menu != -1) var t = 0.6; else var t = obj_day_night.time / 60;
    if (t &gt;= 0.2 &amp;&amp; t &lt; 0.3) {
        color = merge_color(night, day, (t - 0.2) / 0.1);
        alpha = 1 - (t - 0.2) / 0.1;
    } else if (t &gt; 0.8 &amp;&amp; t &lt; 0.9) {
        color = merge_color(day, night, (t - 0.8) / 0.1);
        alpha = (t - 0.8) / 0.1;
    } else if (t &gt;= 0.9 || t &lt; 0.2) {
        alpha = 1;
        color = night;
    } else {
        color = day;
    }
    if (obj_main.in_menu == -1) {
        var t = obj_day_night.time / 60, p = obj_day_night.time_previous / 60;
        if (p &lt; 0.55 &amp;&amp; t &gt;= 0.55) with (instance_create(0, 0, obj_ui_message_big)) message = 1;
        if (p &lt; 0.8 &amp;&amp; t &gt;= 0.8) with (instance_create(0, 0, obj_ui_message_big)) message = 2;
        if (p &lt; 0.05 &amp;&amp; t &gt;= 0.05) with (instance_create(0, 0, obj_ui_message_big)) message = 3;
        if (p &lt; 0.2 &amp;&amp; t &gt;= 0.2) with (instance_create(0, 0, obj_ui_message_big)) message = 0;
    }
    draw_clear(color);
    draw_background_tiled_ext(bg_stars, 0, 0, 1, 1, c_white, alpha);
    var angle = (t) * 360 + 70;
    draw_sprite(spr_sun_moon, 0, 2752 + dcos(angle) * 1300, 1664 + dsin(angle) * 600);
    draw_sprite(spr_sun_moon, 1, 2752 + dcos(angle + 180) * 1300, 1664 + dsin(angle + 180) * 600);
    
    with (obj_background_0) event_perform(ev_draw, 0);
    with (obj_background_1) event_perform(ev_draw, 0);
    with (obj_parent_furniture) event_perform(ev_draw, 0);
    with (obj_player) event_perform(ev_draw, 0);
    with (obj_fragment) event_perform(ev_draw, 0);
    with (obj_arrow) event_perform(ev_draw, 0);
    with (obj_foreground_0) event_perform(ev_draw, 0);
    with (obj_foreground_1) event_perform(ev_draw, 0);
} else if (view_current == 1) {
    draw_clear_alpha(c_black, 0);
    draw_enable_alphablend(false);
    with (obj_water) event_perform(ev_draw, 0);
    draw_enable_alphablend(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
