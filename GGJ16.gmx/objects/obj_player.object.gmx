<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mask_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>velocity_x = 0; velocity_y = 0;
gravity_y = 0.5;
max_speed_x = 5;
acceleration_x = 0.50;
scale_x = 1.0;
key_aim_up = vk_up;
key_aim_down = vk_down;
key_move_left = vk_left;
key_move_right = vk_right;
key_attack = vk_lshift;
key_jump = vk_control;
key_switch_weapon = vk_enter;
aim_up = false;
on_ground = false;
jump_speed = 15;
animation_speed = 0.25;
animation_index = irandom(100);
omen_points = 3;
life_points = 3;
respawn = false;
respawn_timer = 0.0;
equiped_weapon = 0;
swing_attack = false;
bow_attack = false;
spr_player = spr_player_idle;
color = c_black;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(respawn) {
    life_points--;
    respawn_timer = 5.0;
    respawn = false;
    var spawn_point = instance_nearest(x, y, obj_spawn_point);
    x = spawn_point.x;
    y = spawn_point.y;
}
respawn_timer -= 1.0 / room_speed;
if(respawn_timer &lt; 2.5) {
    x_previous = x; y_previous = y;
    var can_move = spr_player != spr_player_kneeling || spr_player != spr_player_draw_bow || spr_player != spr_player_swing;
    
    // Changes velocity.
    if(can_move) {
        velocity_x = clamp((keyboard_check(key_move_right) - keyboard_check(key_move_left)) * max_speed_x, velocity_x - acceleration_x, velocity_x + acceleration_x);
    }
    
    // Changes animation.
    animation_index += animation_speed;
    
    if (spr_player == spr_player_swing) {
        if(animation_index &gt;= sprite_get_number(spr_player_swing)) {
            spr_player = spr_player_idle;
            swing_attack = false;
        }
    }
    else if(spr_player == spr_player_draw_bow) {
        if(animation_index &gt;= sprite_get_number(spr_player_draw_bow) - 1) {
            animation_index = sprite_get_number(spr_player_draw_bow) - 1 - (1 - aim_up);
        }
    }
    else if(spr_player == spr_player_kneeling) {
        if(keyboard_check_released(key_aim_down) || keyboard_check_pressed(key_aim_down)) {
            animation_speed *= -1;
        }
        else if(animation_index &gt; sprite_get_number(spr_player_kneeling) - 1) {
            animation_index = sprite_get_number(spr_player_kneeling) - 1;
        }
        else if(animation_index &lt; 0.0) {
            spr_player =  spr_player_idle;
            animation_speed *= -1;
        }
    }
    else {
        if(equiped_weapon == 0 &amp;&amp; keyboard_check_pressed(key_attack))
        {
            spr_player = spr_player_swing;
            animation_index = 0.0;
            swing_attack = true;
        }
        else if(equiped_weapon == 1 &amp;&amp; keyboard_check_pressed(key_attack)) {
            spr_player = spr_player_draw_bow;
            animation_index = 0.0;
        }
        else if(keyboard_check_pressed(key_aim_down)) {
            spr_player = spr_player_kneeling;
            animation_index = 0.0;
        }
        else if(!on_ground) {
            spr_player = spr_player_turn;
        }
        else if(keyboard_check(key_move_right) &amp;&amp; velocity_x &lt; 0.0) {
            spr_player = spr_player_turn;
        }
        else if(keyboard_check(key_move_left) &amp;&amp; velocity_x &gt; 0.0) {
            spr_player = spr_player_turn;
        }
        else if (abs(velocity_x) &gt; 0)
            spr_player = spr_player_run;
        else
            spr_player = spr_player_idle;
    }
    
    // Jump
    if (on_ground) {
        if (can_move &amp;&amp; keyboard_check_pressed(key_jump)) {
            velocity_y = -jump_speed;
        } else {
            velocity_y = 0;
        }
    } else {
        velocity_y += gravity_y;
    }
    
    // Collision vertically.
    if (velocity_y &gt; 0) {
        move_contact_solid(270, velocity_y);
    } else if (velocity_y &lt; 0) {
        move_contact_solid(90, -velocity_y);
        if (place_meeting(x, y - 1, obj_parent_collision)) velocity_y = 0;
    }
    on_ground = place_meeting(x, y + 1, obj_parent_collision);
    
    // Collision horizontally.
    if (velocity_x &gt; 0) {
        scale_x = 1;
        if (place_meeting(x + velocity_x, y, obj_slope_1)) {
            x += velocity_x * 0.6;
            move_outside_solid(90, -1);
        } else if (place_meeting(x + velocity_x, y, obj_parent_collision_stop)) {
            move_contact_solid(0, velocity_x);
            velocity_x = 0;
        } else {
            x += velocity_x;
        }
    } else if (velocity_x &lt; 0) {
        scale_x = -1;
        if (place_meeting(x + velocity_x, y, obj_slope_0)) {
            x += velocity_x * 0.6;
            move_outside_solid(90, -1);
        } else if (place_meeting(x + velocity_x, y, obj_parent_collision_stop)) {
            move_contact_solid(180, -velocity_x);
            velocity_x = 0;
        } else {
            x += velocity_x;
        }
    }
    
    if(respawn_timer &lt; 0.0) {
        if(id == obj_main.player_0) {
            if(instance_place(x, y, obj_main.player_1)) {
                if(obj_main.player_1.swing_attack) {
                    respawn = true;
                }
            }
        }
        else if(obj_main.player_0.respawn_timer &lt; 0.0) {
            if(instance_place(x, y, obj_main.player_0)) {
                if(obj_main.player_0.swing_attack) {
                    respawn = true;
                }
            }
        }
    }
    
    // Arrow firing
    if (equiped_weapon == 1) {
        if (!bow_attack) {
            if (keyboard_check_pressed(key_attack)) {
                animation_index = 0.0;
                bow_attack = true;
                aim_up = false;
            }
        }
        else {
            if(keyboard_check_pressed(key_aim_up)) aim_up = true;
            else if(keyboard_check_released(key_aim_down)) aim_up = false;
            if (animation_index &gt;= sprite_get_number(spr_player_draw_bow) - 2 &amp;&amp; !keyboard_check(key_attack)) {
                var arrow = instance_create(x, y - 20, obj_arrow);
                var angle = 45.0 * aim_up;
                arrow.velocity_x = 15.0 * dcos(angle) * scale_x * 2;
                arrow.velocity_y = -15.0 * dsin(angle);
                arrow.owner = id;
                bow_attack = false;
                spr_player = spr_player_idle;
            }
        }
    }
}

// Weapon switching
if(!swing_attack) {
    if(keyboard_check_pressed(key_switch_weapon)) {
        equiped_weapon = (equiped_weapon + 1) % 2;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(respawn_timer &lt; 0.0 || (respawn_timer &lt; 2.5 &amp;&amp; (respawn_timer % 0.5) &lt; 0.25)) {
    draw_sprite_ext(spr_player, animation_index, x, y, scale_x, 1, 0, color, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
