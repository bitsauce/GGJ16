<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mask_player</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>velocity_x = 0; velocity_y = 0;
gravity_y = 0.5;
max_speed_x = 5;
acceleration_x = 0.50;
arrow_power = 0.0;
scale_x = 1.0;
key_aim_up = vk_up;
key_aim_down = vk_down;
key_move_down = vk_down;
key_move_left = vk_left;
key_move_right = vk_right;
key_attack = vk_lshift;
key_jump = vk_control;
key_switch_weapon = vk_enter;
on_ground = false;
jump_speed = 15;
animation_speed = 0.25;
animation_index = irandom(100);
omen_points = 3;
life_points = 3;
respawn = false;
respawn_timer = 0.0;
equiped_weapon = 0;
swing_attack = false;
spr_player = spr_player_idle;
color = c_black;
bow_attack = false;
bell_timer = 0.0;
bell_active = false;
door_timer = 0.0;
door_active = false;
greeting_timer = 3.0;
greeting_active = true;
rain_dance_timer = 0.0;
rain_dance_active = false;

footstep_sounds = ds_list_create();
ds_list_add(footstep_sounds, snd_footstep_1, snd_footstep_2, snd_footstep_3, snd_footstep_4);

weapon_x = ds_map_create();
weapon_y = ds_map_create();
weapon_angle = ds_map_create();
weapon_behind = ds_map_create();

var list_x = ds_list_create();
var list_y = ds_list_create();
var list_angle = ds_list_create();
ds_list_add(list_x, 69, 68, 67, 65, 63, 63, 63, 63, 65, 67, 68, 69);
ds_list_add(list_y, 44, 44, 43, 43, 45, 45, 45, 45, 43, 43, 44, 44);
ds_list_add(list_angle, 8 - 25, 5 - 25, 3 - 25, 2 - 25, 1 - 25, 0 - 25, 0 - 25, 1 - 25, 2 - 25, 3 - 25, 5 - 25, 8 - 25);
weapon_x[? spr_player_idle] = list_x;
weapon_y[? spr_player_idle] = list_y;
weapon_angle[? spr_player_idle] = list_angle;
weapon_behind[? spr_player_idle] = false;

list_x = ds_list_create();
list_y = ds_list_create();
list_angle = ds_list_create();
ds_list_add(list_x, 50, 57, 66, 71, 70, 67, 65, 63, 50, 55);
ds_list_add(list_y, 43, 48, 48, 44, 41, 45, 47, 45, 44, 38);
ds_list_add(list_angle, -10, -8, -4, -3, -2, -1, -1, -1, -3, -3);
weapon_x[? spr_player_run] = list_x;
weapon_y[? spr_player_run] = list_y;
weapon_angle[? spr_player_run] = list_angle;
weapon_behind[? spr_player_run] = true;

list_x = ds_list_create();
list_y = ds_list_create();
list_angle = ds_list_create();
ds_list_add(list_x, 60);
ds_list_add(list_y, 45);
ds_list_add(list_angle, -5);
weapon_x[? spr_player_turn] = list_x;
weapon_y[? spr_player_turn] = list_y;
weapon_angle[? spr_player_turn] = list_angle;
weapon_behind[? spr_player_turn] = false;

list_x = ds_list_create();
list_y = ds_list_create();
list_angle = ds_list_create();
ds_list_add(list_x, 65, 60, 59, 58, 57, 56, 57, 57, 59, 61, 67, 68, 68, 60);
ds_list_add(list_y, 43, 46, 46, 47, 48, 48, 48, 48, 47, 45, 59, 28, 27, 16);
ds_list_add(list_angle, 0, -10, -30, -30, -30, -30, -30, -30, -30, -25, -5, 0, 1, 45);
weapon_x[? spr_player_draw_bow] = list_x;
weapon_y[? spr_player_draw_bow] = list_y;
weapon_angle[? spr_player_draw_bow] = list_angle;
weapon_behind[? spr_player_draw_bow] = false;

list_x = ds_list_create();
list_y = ds_list_create();
list_angle = ds_list_create();
ds_list_add(list_x, 66, 65, 50, 78, 48, 33, 35, 41, 53, 62, 64, 66);
ds_list_add(list_y, 45, 29, 17, 40, 56, 48, 45, 50, 52, 46, 46, 44);
ds_list_add(list_angle, 70 - 90, -160 - 90, 120 - 90, 20 - 90, -105 - 90, -120 - 90, 180 - 90, 120 - 90, 100 - 90, 85 - 90, 80 - 90, 75 - 90);
weapon_x[? spr_player_swing] = list_x;
weapon_y[? spr_player_swing] = list_y;
weapon_angle[? spr_player_swing] = list_angle;
weapon_behind[? spr_player_swing] = false;

list_x = ds_list_create();
list_y = ds_list_create();
list_angle = ds_list_create();
ds_list_add(list_x, 60, 59, 64, 68, 62, 56);
ds_list_add(list_y, 43, 50, 42, 28, 11, 11);
ds_list_add(list_angle, -5, -15, -5, -5, -5, 0);
weapon_x[? spr_player_toast] = list_x;
weapon_y[? spr_player_toast] = list_y;
weapon_angle[? spr_player_toast] = list_angle;
weapon_behind[? spr_player_toast] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(respawn) {
    life_points--;
    respawn_timer = 5.0;
    respawn = false;
    var spawn_point = instance_nearest(x, y, obj_spawn_point);
    x = spawn_point.x;
    y = spawn_point.y;
    if(omen_points &lt;= 0) omen_points = 3;
    spr_player = spr_player_idle;
}
respawn_timer -= 1.0 / room_speed;
if(respawn_timer &lt; 2.5) {
    x_previous = x; y_previous = y;
    var can_move = spr_player != spr_player_kneeling &amp;&amp; spr_player != spr_player_dance &amp;&amp; spr_player != spr_player_toast &amp;&amp; spr_player != spr_player_draw_bow &amp;&amp; spr_player != spr_player_swing;
    
    // Changes velocity.
    velocity_x = clamp((keyboard_check(key_move_right) - keyboard_check(key_move_left)) * max_speed_x * can_move, velocity_x - acceleration_x, velocity_x + acceleration_x);
    
    // Changes animation.
    animation_index += animation_speed;
    
    if(omen_points &lt;= 0) {
        if(spr_player != spr_player_kneeling) animation_index = 0.0;
        spr_player = spr_player_kneeling;
        if(animation_index &gt; sprite_get_number(spr_player_kneeling) - 1) {
            respawn = true;
        }
    }
    else if (spr_player == spr_player_swing) {
        if(animation_index &gt;= sprite_get_number(spr_player_swing)) {
            spr_player = spr_player_idle;
            swing_attack = false;
        }
    }
    else if(spr_player == spr_player_draw_bow) {
        if(animation_index &gt;= sprite_get_number(spr_player_draw_bow) - 1) {
            animation_index = sprite_get_number(spr_player_draw_bow) - 1 - (1 - aim_up);
        }
    }
    else if(spr_player == spr_player_toast) {
        if(keyboard_check_released(key_aim_up) || keyboard_check_pressed(key_aim_up)) {
            animation_speed *= -1;
        }
        else if(animation_index &gt; sprite_get_number(spr_player_toast) - 1) {
            animation_index = sprite_get_number(spr_player_toast) - 1;
            greeting_active = false;
        }
        else if(animation_index &lt; 0.0) {
            spr_player =  spr_player_idle;
            animation_speed *= -1;
            animation_index = 0.0;
        }
    }
    else if(spr_player == spr_player_kneeling) {
        if(keyboard_check_released(key_aim_down) || keyboard_check_pressed(key_aim_down)) {
            animation_speed *= -1;
        }
        else if(animation_index &gt; sprite_get_number(spr_player_kneeling) - 1) {
            animation_index = sprite_get_number(spr_player_kneeling) - 1;
            bell_active = false;
        }
        else if(animation_index &lt; 0.0) {
            spr_player =  spr_player_idle;
            animation_speed *= -1;
            animation_index = 0.0;
        }
    }
    else if(spr_player == spr_player_dance) {
        if(!keyboard_check(key_move_left) || !keyboard_check(key_move_right) /*||
           animation_index &gt; sprite_get_number(spr_player_dance) - 1*/) {
            spr_player =  spr_player_idle;
            animation_index = 0.0;
        }
    }
    else {
        if(equiped_weapon == 0 &amp;&amp; keyboard_check_pressed(key_attack))
        {
            spr_player = spr_player_swing;
            animation_index = 0.0;
            swing_attack = true;
            audio_play_sound(snd_swing, 0, false);
        }
        else if(equiped_weapon == 1 &amp;&amp; keyboard_check_pressed(key_attack)) {
            spr_player = spr_player_draw_bow;
            animation_index = 0.0;
        }
        else if(keyboard_check_pressed(key_move_left) &amp;&amp; keyboard_check_pressed(key_move_right)) {
            spr_player = spr_player_dance;
            animation_index = 0.0;
        }
        else if(keyboard_check_pressed(key_aim_up)) {
            spr_player = spr_player_toast;
            animation_index = 0.0;
        }
        else if(keyboard_check_pressed(key_aim_down)) {
            spr_player = spr_player_kneeling;
            animation_index = 0.0;
        }
        else if(!on_ground) {
            spr_player = spr_player_turn;
        }
        else if(keyboard_check(key_move_right) &amp;&amp; velocity_x &lt; 0.0) {
            spr_player = spr_player_turn;
        }
        else if(keyboard_check(key_move_left) &amp;&amp; velocity_x &gt; 0.0) {
            spr_player = spr_player_turn;
        }
        else if (abs(velocity_x) &gt; 0) {
            spr_player = spr_player_run;
            var frame_idx = floor(animation_index) % sprite_get_number(spr_player_run);
            if(frame_idx == 4 || frame_idx == 9) audio_play_sound(footstep_sounds[| irandom(3)], 0, false);
        }
        else {
            spr_player = spr_player_idle;
        }
    }
    
    // Jump
    if (on_ground) {
        if (can_move &amp;&amp; keyboard_check_pressed(key_jump)) {
            velocity_y = -jump_speed;
        } else {
            velocity_y = 0;
        }
    } else {
        velocity_y += gravity_y;
    }
    
    var fall_through_jump_through_collision = keyboard_check(key_move_down) || place_meeting(x, y, obj_parent_collision_jump_through);
    
    // Collision vertically.
    if (velocity_y &gt; 0) {
        if (fall_through_jump_through_collision) with (obj_parent_collision_jump_through) solid = false;
        move_contact_solid(270, velocity_y);
        if (fall_through_jump_through_collision) with (obj_parent_collision_jump_through) solid = true;
    } else if (velocity_y &lt; 0) {
        with (obj_parent_collision_jump_through) solid = false;
        move_contact_solid(90, -velocity_y);
        with (obj_parent_collision_jump_through) solid = true;
        if (place_meeting(x, y - 1, obj_parent_collision)) velocity_y = 0;
    }
    on_ground = place_meeting(x, y + 1, obj_parent_collision) || (place_meeting(x, y + 1, obj_parent_collision_jump_through) &amp;&amp; !fall_through_jump_through_collision &amp;&amp; velocity_y &gt;= 0);
    
    // Collision horizontally.
    if (velocity_x &gt; 0) {
        scale_x = 1;
        if (place_meeting(x + velocity_x, y, obj_slope_1)) {
            with (obj_parent_collision_jump_through) solid = false;
            x += velocity_x * 0.65;
            move_outside_solid(90, -1);
            with (obj_parent_collision_jump_through) solid = true;
        } else if (!fall_through_jump_through_collision &amp;&amp; place_meeting(x + velocity_x, y, obj_slope_1_jump_through)) {
            x += velocity_x * 0.65;
            move_outside_solid(90, -1);        
        } else if (place_meeting(x + velocity_x, y, obj_parent_collision_stop)) {
            move_contact_solid(0, velocity_x);
            velocity_x = 0;
        } else {
            x += velocity_x;
        }
    } else if (velocity_x &lt; 0) {
        scale_x = -1;
        if (place_meeting(x + velocity_x, y, obj_slope_0)) {
            with (obj_parent_collision_jump_through) solid = false;
            x += velocity_x * 0.65;
            move_outside_solid(90, -1);
            with (obj_parent_collision_jump_through) solid = true;
        } else if (!fall_through_jump_through_collision &amp;&amp; place_meeting(x + velocity_x, y, obj_slope_0_jump_through)) {
            x += velocity_x * 0.65;
            move_outside_solid(90, -1);
        } else if (place_meeting(x + velocity_x, y, obj_parent_collision_stop)) {
            move_contact_solid(180, -velocity_x);
            velocity_x = 0;
        } else {
            x += velocity_x;
        }
    }
    
    // Player to player swing attack
    if(respawn_timer &lt; 0.0 &amp;&amp; other_player.respawn_timer &lt; 0.0) {
        if(instance_place(x, y, other_player)) {
            if(other_player.swing_attack) {
                if(swing_attack) {
                    other_player.swing_attack = false;
                    other_player.spr_player = spr_player_idle;
                    swing_attack = false;
                    spr_player = spr_player_idle;
                }
                else {
                    respawn = true;
                }
            }
        }
    }
            
    // Arrow firing
    if (equiped_weapon == 1) {
        if (!bow_attack) {
            if (keyboard_check_pressed(key_attack)) {
                animation_index = 0.0;
                bow_attack = true;
                aim_up = keyboard_check(key_aim_up);
                bow_sound = audio_play_sound(snd_bow_draw, 0, false);
            }
        }
        else {
            if(!audio_is_playing(bow_sound)) {
                bow_sound = audio_play_sound(snd_bow_hold, 0, true);
            }
            if(keyboard_check_pressed(key_aim_up)) aim_up = true;
            else if(keyboard_check_released(key_aim_down)) aim_up = false;
            if (animation_index &gt;= sprite_get_number(spr_player_draw_bow) - 2 &amp;&amp; !keyboard_check(key_attack)) {
                var arrow = instance_create(x, y - 20, obj_arrow);
                var angle = 60.0 * aim_up;
                arrow.velocity_x = 15.0 * dcos(angle) * scale_x * 2;
                arrow.velocity_y = -15.0 * dsin(angle);
                arrow.owner = id;
                bow_attack = false;
                spr_player = spr_player_idle;
                audio_stop_sound(bow_sound);
                audio_play_sound(snd_bow_shoot, 0, false);
            }
        }
    }
    
    // Hitting bells
    if(swing_attack) {
        var bell = instance_place(x, y, obj_bell);
        if(bell &amp;&amp; bell.swing_time &gt; 20.0) {
            bell.swing_time = 0.0;
            other_player.bell_timer = 3.0;
            other_player.bell_active = true;
            audio_play_sound(snd_bell, 0, false);
        }
    }
    
    if(bell_active &amp;&amp; bell_timer &lt; 0.0) {
        omen_points--;
        bell_active = false;
    }
    bell_timer -= 1.0 / room_speed;
    
    // Opening doors
    if(keyboard_check_pressed(key_aim_up) &amp;&amp; !bow_attack) {
        var door = instance_nearest(x, y, obj_door);
        if(!place_meeting(x, y, door) &amp;&amp; point_distance(x, y, door.x, door.y) &lt; 100) {
            door.open = !door.open;
            door.opened_by = id;
            door.timer = 3.0;
        }
    }
    
    // Greeting
    if(greeting_active &amp;&amp; greeting_timer &lt; 0.0) {
        omen_points--;
        greeting_active = false;
    }
    greeting_timer -= 1.0 / room_speed;
}

// Weapon switching
if(!swing_attack) {
    if(keyboard_check_pressed(key_switch_weapon)) {
        audio_play_sound(snd_switch_weapon, 0, false);
        equiped_weapon = (equiped_weapon + 1) % 2;
   }
}

x = clamp(x, 478, 5353);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(respawn_timer &lt; 0.0 || (respawn_timer &lt; 2.5 &amp;&amp; (respawn_timer % 0.5) &lt; 0.25)) {
    placement = ds_map_exists(weapon_x, spr_player) &amp;&amp; ds_map_exists(weapon_y, spr_player) &amp;&amp; ds_map_exists(weapon_angle, spr_player);
    behind = ds_map_exists(weapon_behind, spr_player) &amp;&amp; ds_map_find_value(weapon_behind, spr_player);
    if(!behind) {
        draw_sprite_ext(spr_player, animation_index, x, y + 2, scale_x, 1, 0, color, 1);
    }
    if(placement) {
        var angle;
        var frame_index = floor(animation_index) % sprite_get_number(spr_player);
        var sprite;
        
        if(equiped_weapon == 0) {
            sprite = spr_sword;
        }
        else {
            sprite = spr_bow;
        }
        
        if(scale_x &gt; 0) angle = ds_list_find_value(ds_map_find_value(weapon_angle, spr_player), frame_index);
        else angle = 180 - ds_list_find_value(ds_map_find_value(weapon_angle, spr_player), frame_index);
    
        var weapon_animation_index = 0;
        if(spr_player == spr_player_draw_bow) {
            weapon_animation_index = clamp(frame_index - 10, 0, 2);
        }
        
        draw_sprite_ext(sprite, weapon_animation_index,
            x + (ds_list_find_value(ds_map_find_value(weapon_x, spr_player), frame_index) - sprite_get_xoffset(spr_player)) * scale_x,
            y + 2 + (ds_list_find_value(ds_map_find_value(weapon_y, spr_player), frame_index) - sprite_get_yoffset(spr_player)),
            1, scale_x, angle, c_white, 1);
    }
    if(behind) {
        draw_sprite_ext(spr_player, animation_index, x, y + 2, scale_x, 1, 0, color, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
