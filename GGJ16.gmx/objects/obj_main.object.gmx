<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_fullscreen(true);
application_surface_enable(false);

display_width = display_get_width(); display_height = display_get_height();
//display_width = room_width; display_height = room_height;

var spawn_point = instance_find(obj_initial_spawn_point, 0);
player_0 = instance_create(spawn_point.x - 32 * 2, spawn_point.y, obj_player);
player_1 = instance_create(spawn_point.x + 32 * 2, spawn_point.y, obj_player);

with (player_0) {
    key_move_left = ord("A");
    key_move_right = ord("D");
    key_aim_up = ord("W");
    key_aim_down = ord("S");
    key_attack = ord("E");
    key_jump = vk_space;
    key_switch_weapon = ord("Q");
    color = make_colour_rgb(0, 200, 200);
}

with (player_1) {
    key_move_left = vk_left;
    key_move_right = vk_right;
    key_aim_up = vk_up;
    key_aim_down = vk_down;
    key_attack = vk_rshift;
    key_jump = vk_rcontrol;
    key_switch_weapon = vk_enter;
    color = make_colour_rgb(200, 0, 200);
    scale_x = -1;
}

instance_create(0, 0, obj_ui);
instance_create(0, 0, obj_camera);
instance_create(0, 0, obj_day_night);
instance_create(0, 0, obj_water);

with (all) visible = false;
visible = true;

sf_water_reflection = -1;
sf_water = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(sf_water_reflection)) {
    sf_water_reflection = surface_create(display_width, display_height);
    view_surface_id[0] = sf_water_reflection;
}
if (!surface_exists(sf_water)) {
    sf_water = surface_create(display_width, display_height);
    view_surface_id[1] = sf_water;
}

if (keyboard_check_pressed(vk_escape)) game_end();
if (keyboard_check_pressed(ord("1"))) player_0.omen_points++;
if (keyboard_check_pressed(ord("2"))) player_1.omen_points++;

var done = false;
if(player_0.life_points &lt;= 0) {
    obj_ui.winner = 2;
    done = true;
}
else if(player_1.life_points &lt;= 0) {
    obj_ui.winner = 3;
    done = true;
}

if(done) {
    with (player_0) {
        key_move_left = -1;
        key_move_right = -1;
        key_aim_up = -1;
        key_aim_down = -1;
        key_attack = -1;
        key_jump = -1;
        key_switch_weapon = -1;
    }
    
    with (player_1) {
        key_move_left = -1;
        key_move_right = -1;
        key_aim_up = -1;
        key_aim_down = -1;
        key_attack = -1;
        key_jump = -1;
        key_switch_weapon = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface(sf_water_reflection, 0, 0);

shader_set(sh_water);
    texture_set_repeat(true);
    texture_set_stage(shader_get_sampler_index(sh_water, "texture_sf_water_reflection"), surface_get_texture(sf_water_reflection));
    texture_set_stage(shader_get_sampler_index(sh_water, "s_normalMap"), sprite_get_texture(spr_water_normal, 0));
    shader_set_uniform_f(shader_get_uniform(sh_water, "reflection_y"), ((1792 - view_yview)) / view_hview);
    shader_set_uniform_f(shader_get_uniform(sh_water, "time"), get_timer() * 0.00000001);
    draw_surface(sf_water, 0, 0);
    texture_set_repeat(false);
shader_reset();

with (obj_day_night) event_perform(ev_draw, ev_gui);
with (obj_ui) event_perform(ev_draw, ev_gui);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (view_current == 0) {
    draw_clear(make_color_rgb(100, 150, 255));
    
    with (obj_background_0) event_perform(ev_draw, 0);
    with (obj_background_1) event_perform(ev_draw, 0);
    with (obj_player) event_perform(ev_draw, 0);
    with (obj_arrow) event_perform(ev_draw, 0);
    with (obj_foreground_0) event_perform(ev_draw, 0);
    with (obj_foreground_1) event_perform(ev_draw, 0);
} else if (view_current == 1) {
    draw_clear_alpha(c_black, 0);
    draw_enable_alphablend(false);
    with (obj_water) event_perform(ev_draw, 0);
    draw_enable_alphablend(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
